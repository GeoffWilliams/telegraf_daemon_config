###############################################################################
#                            Agent Setup                                      #
###############################################################################
[global_tags]

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  hostname = ""
  omit_hostname = false

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

#
# Prometheus
# 
# https://github.com/influxdata/telegraf/blob/release-1.25/plugins/inputs/prometheus/README.md
[[inputs.prometheus]]

# Because of this issue we cannot supply array as environment variable so must programatically
# regenerate the config file and build a separate container for each environment:
# https://github.com/influxdata/telegraf/issues/5762
  ## An array of urls to scrape metrics from.
  # Sample URL: https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-8wd277&resource.kafka.id=lkc-9kg320&resource.ksql.id=lksqlc-7y3r02&resource.connector.id=lcc-8w6v2r&resource.schema.id=lsrc-x1gxg
  urls = ["https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-9kg320",
  "https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-2r3w3o",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-2rwjyq",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-d9vx37",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-k80dn2",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-nwy72k",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-vrkjkn",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-ymmyqj",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-095w19",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-3r0m2j",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-7nqjmw",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-vr5g0n",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-w5odxw",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-5wqqd8",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-d9pqkz",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-gnx17r",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-zgn0nz",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-5wywj2",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-7n1ny1",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-9kg320",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-m86grw",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.kafka.id=lkc-w9ykm",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-8wz175",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-d90wxz",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-gnp7yn",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-gqwk5r",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-nwvr1v",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-pr0y6y",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.schema_registry.id=lsrc-x1gxg",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-12rmkz",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-1j0g26",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-7y3r02",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-d913q1",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-prjq0y",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-qrwg06",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-vrw6x5",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-xm0xzq",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-ym23p6",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.ksql.id=lksqlc-ymqykp",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-09j896",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-1jkj03",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-3rkr0m",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-6kyxo2",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-8w6v2r",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-8wd277",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-8wq6zq",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-gnx5zm",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-m8nkmx",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-nvzn8d",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-oqvd3o",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-pr5w3m",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-qrw2qm",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-zgwp8d",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-zgwvyd",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-zgyk8z",
"https://api.telemetry.confluent.cloud/v2/metrics/cloud/export?resource.connector.id=lcc-zmo2xz"]

metric_version = 1
username = "${CCLOUD_METRICS_API_KEY}"
password = "${CCLOUD_METRICS_API_SECRET}"

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.file]]
  files = ["stdout"]


###############################################################################
#                      Examples/Other useful plugins                          #
###############################################################################

#
# Kafka
#
# https://github.com/influxdata/telegraf/blob/release-1.25/plugins/outputs/kafka/README.md
#

# Example of how to output to kafka topic

# [[outputs.kafka]]
# brokers = ["pkc-XXXXX.ap-southeast-1.aws.confluent.cloud:9092"]
# topic = "telegraf_metrics"
# client_id = "Telegraf"
# version = "3.0.0"
# enable_tls = true
# sasl_username = "${CCLOUD_API_KEY}"
# sasl_password = "${CCLOUD_API_SECRET}"
# sasl_mechanism = "PLAIN"
# data_format = "json"


#
# OpenTelemetry
#
# https://github.com/influxdata/telegraf/blob/release-1.25/plugins/outputs/opentelemetry/README.md

#
# SumoLogic
#
# https://github.com/influxdata/telegraf/blob/release-1.25/plugins/outputs/sumologic/README.md
